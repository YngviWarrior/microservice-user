// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: user_stretegy.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserStrategyService_CreateUserStrategy_FullMethodName = "/pb.UserStrategyService/CreateUserStrategy"
	UserStrategyService_ListUserStrategy_FullMethodName   = "/pb.UserStrategyService/ListUserStrategy"
)

// UserStrategyServiceClient is the client API for UserStrategyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStrategyServiceClient interface {
	CreateUserStrategy(ctx context.Context, in *CreateUserStrategyRequest, opts ...grpc.CallOption) (*UserStrategyResponse, error)
	ListUserStrategy(ctx context.Context, in *ListUserStrategyRequest, opts ...grpc.CallOption) (*UserStrategyResponse, error)
}

type userStrategyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStrategyServiceClient(cc grpc.ClientConnInterface) UserStrategyServiceClient {
	return &userStrategyServiceClient{cc}
}

func (c *userStrategyServiceClient) CreateUserStrategy(ctx context.Context, in *CreateUserStrategyRequest, opts ...grpc.CallOption) (*UserStrategyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStrategyResponse)
	err := c.cc.Invoke(ctx, UserStrategyService_CreateUserStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStrategyServiceClient) ListUserStrategy(ctx context.Context, in *ListUserStrategyRequest, opts ...grpc.CallOption) (*UserStrategyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStrategyResponse)
	err := c.cc.Invoke(ctx, UserStrategyService_ListUserStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStrategyServiceServer is the server API for UserStrategyService service.
// All implementations must embed UnimplementedUserStrategyServiceServer
// for forward compatibility.
type UserStrategyServiceServer interface {
	CreateUserStrategy(context.Context, *CreateUserStrategyRequest) (*UserStrategyResponse, error)
	ListUserStrategy(context.Context, *ListUserStrategyRequest) (*UserStrategyResponse, error)
	mustEmbedUnimplementedUserStrategyServiceServer()
}

// UnimplementedUserStrategyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserStrategyServiceServer struct{}

func (UnimplementedUserStrategyServiceServer) CreateUserStrategy(context.Context, *CreateUserStrategyRequest) (*UserStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserStrategy not implemented")
}
func (UnimplementedUserStrategyServiceServer) ListUserStrategy(context.Context, *ListUserStrategyRequest) (*UserStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserStrategy not implemented")
}
func (UnimplementedUserStrategyServiceServer) mustEmbedUnimplementedUserStrategyServiceServer() {}
func (UnimplementedUserStrategyServiceServer) testEmbeddedByValue()                             {}

// UnsafeUserStrategyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStrategyServiceServer will
// result in compilation errors.
type UnsafeUserStrategyServiceServer interface {
	mustEmbedUnimplementedUserStrategyServiceServer()
}

func RegisterUserStrategyServiceServer(s grpc.ServiceRegistrar, srv UserStrategyServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserStrategyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserStrategyService_ServiceDesc, srv)
}

func _UserStrategyService_CreateUserStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStrategyServiceServer).CreateUserStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStrategyService_CreateUserStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStrategyServiceServer).CreateUserStrategy(ctx, req.(*CreateUserStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStrategyService_ListUserStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStrategyServiceServer).ListUserStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStrategyService_ListUserStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStrategyServiceServer).ListUserStrategy(ctx, req.(*ListUserStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStrategyService_ServiceDesc is the grpc.ServiceDesc for UserStrategyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStrategyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserStrategyService",
	HandlerType: (*UserStrategyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserStrategy",
			Handler:    _UserStrategyService_CreateUserStrategy_Handler,
		},
		{
			MethodName: "ListUserStrategy",
			Handler:    _UserStrategyService_ListUserStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_stretegy.proto",
}
